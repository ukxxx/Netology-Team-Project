import logging
import time
import os
from random import randrange

import requests
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from dotenv import load_dotenv

# Import custom modules and classes
from resourses import *
from VK_bot_interaction import VKBot

# Set up logging configuration to handle errors
logging.basicConfig(level=logging.ERROR)

# Load environment variables from .env file
load_dotenv()

# Get the VK group token from the environment variable
token = os.getenv("GROUP_TOKEN")

# Create VK API object and VKBot instance
vk = vk_api.VkApi(token=token)
vkbot = VKBot()

# Set up VK Long Poll to listen for incoming messages
longpoll = VkLongPoll(vk)

# Get the long poll server details from VK API
res = vk.method("messages.getLongPollServer")

# Get the initial keyboard layouts for interaction
keyboard_first = vkbot.show_keyboard_first()
keyboard_main = vkbot.show_keyboard_main()

try:
    # Try to establish a connection with VK Long Poll server
    connect = requests.get(
        f"https://{res['server']}?"
        f"act=a_check&key={res['key']}&ts={res['ts']}&wait=25&mode=2&version=3"
    )
    if connect.status_code == 200:
        print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å VK —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
except Exception as Error:
    print(Error)

# Listen for incoming events from VK Long Poll
for event in longpoll.listen():

    # Check if the event is a new incoming message directed to the bot
    if event.type == VkEventType.MESSAGE_NEW and event.to_me:
        
        # Check if the message is the starting command "üíì –ù–∞—á–∞—Ç—å üíì"
        if event.text == "üíì –ù–∞—á–∞—Ç—å üíì":
            # Send the initial message to the user
            vkbot.write_msg(event.user_id, f"–ú–æ–∂–µ—Ç –±—ã—Ç—å —ç—Ç–æ —Ç–≤–æ—è –ª—é–±–æ–≤—å?", keyboard_first)
            # Fetch and send the first potential match to the user
            vkbot.ids += vkbot.go_first(event.user_id)

        # Check if the message is the "üíî –î–∞–ª—å—à–µ" command
        elif event.text == "üíî –î–∞–ª—å—à–µ":
            # Check if there are already potential matches in the list
            if not vkbot.ids:
                vkbot.write_msg(event.user_id, f"–î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä–µ–º —Ç–µ–±–µ –ø–∞—Ä—É", keyboard_main)
                vkbot.ids += vkbot.go_first(event.user_id)
            else:
                # Send a random phrase to the user and fetch the next potential match
                vkbot.write_msg(
                    event.user_id, f"{phrases[randrange(len(phrases))]}", keyboard_main
                )
                vkbot.go_next(event.user_id)

        # Check if the message is the "üòç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ üòç" command
        elif event.text == "üòç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ üòç":
            # Get the list of user's favorite matches and send it to the user
            favourite_list = vkbot.vk_db.get_favourites_list(event.user_id)
            if not favourite_list:
                vkbot.write_msg(
                    event.user_id,
                    f"–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ø–æ–∫–∞ –ø—É—Å—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–≥–æ-—Ç–æ",
                    keyboard_main,
                )
            else:
                fav_links = "\n".join(["https://vk.com/id" + str(i) for i in favourite_list])
                vkbot.write_msg(
                    event.user_id,
                    f"üòç –õ—É—á—à–∏–µ –∏–∑ –ª—É—á—à–∏—Ö üòç \n \n {fav_links}",
                    keyboard_main,
                )

        # Check if the message is the "‚ù§ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º" command
        elif event.text == "‚ù§ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º":
            # Check if there are potential matches to save to favorites
            if not vkbot.ids:
                vkbot.write_msg(
                    event.user_id, f"–î–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–±–µ—Ä–µ–º —Ç–µ–±–µ –ø–∞—Ä—É", keyboard_main
                )
                vkbot.ids += vkbot.go_first(event.user_id)
            else:
                # Save the current match to user's favorites and fetch the next potential match
                vkbot.write_msg(event.user_id, f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –µ–¥–µ–º –¥–∞–ª—å—à–µ", keyboard_main)
                match = vkbot.vk_db.query_match(
                    event.user_id, vkbot.ids[vkbot.person_counter]["id"]
                )
                vkbot.vk_db.add_to_favourite(match)
                vkbot.go_next(event.user_id)

        # Check if the message is the "üôà –í —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ üôà" command
        elif event.text == "üôà –í —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ üôà":
            # Check if there are potential matches to add to the black list
            if not vkbot.ids:
                vkbot.write_msg(
                    event.user_id,
                    f"–ù–µ–∫–æ–≥–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫, –∏—â–µ–º",
                    keyboard_main,
                )
                vkbot.ids += vkbot.go_first(event.user_id)
            else:
                # Add the current match to user's black list and fetch the next potential match
                vkbot.write_msg(
                    event.user_id,
                    f"–≠—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –≤ –≤—ã–¥–∞—á–µ, –µ–¥–µ–º –¥–∞–ª—å—à–µ",
                    keyboard_main,
                )
                match = vkbot.vk_db.query_match(
                    event.user_id, vkbot.ids[vkbot.person_counter]["id"]
                )
                vkbot.vk_db.add_to_black_list(match)
                time.sleep(0.5)
                vkbot.vk_db.get_black_list(event.user_id)
                vkbot.go_next(event.user_id)

        # If the message does not match any of the above commands, prompt the user to start the search
        else:
            vkbot.write_msg(
                event.user_id, f"–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è, –Ω–∞—á–Ω–µ–º –ø–æ–∏—Å–∫?", keyboard_first
            )
